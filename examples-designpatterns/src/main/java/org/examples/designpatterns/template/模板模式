1.定义

模板方法模式 (Template Method)
定义了一个操作中的算法的骨架，而将部分步骤的实现在子类中完成。
模板方法模式使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。
模板方法模式是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。，没有关联关系。 
因此，在模板方法模式的类结构图中，只有继承关系。
模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。
代表这些具体逻辑步骤的方法称做基本方法(primitive method)；而将这些基本方法汇总起来的方法叫做模板方法(template method)，这个设计模式的名字就是从此而来。


2.要点
模板方法模式中的三类角色
1、具体方法(Concrete Method)
2、抽象方法(Abstract Method)
3、钩子方法(Hook Method) 


三类角色的关联
在模板方法模式中，首先父类会定义一个算法的框架，即实现算法所必须的所有方法。
其中，具有共性的代码放在父类的具体方法中。
各个子类特殊性的代码放在子类的具体方法中。但是父类中需要有对应抽象方法声明。
钩子方法可以让子类决定是否对算法的不同点进行挂钩。


3.总结
使用模板方法模式可以将代码的公共行为提取，以达到复用的目的。
而对于特殊化的行为在子类中实现。父类的模板方法可以控制子类中的具体实现。
子类无需了解整体算法框架，只需实现自己的业务逻辑即可。


4.实例
模板方法模式应用场景十分广泛。
在《Head First》的模板方法模式章节里列举了一个十分具有代表性的例子。 
现实生活中，茶和咖啡是随处可见的饮料。冲泡一杯茶或冲泡一杯咖啡的过程是怎样的？

我们来整理一下流程。
泡茶：
烧开水 ==> 冲泡茶叶 ==> 倒入杯中 ==> 添加柠檬
泡咖啡：
烧开水 ==> 冲泡咖啡 ==> 倒入杯中 ==> 添加糖和牛奶
由以上处理步骤不难发现，准备这两种饮料的处理过程非常相似。我们可以使用模板类方法去限定制作饮料的算法框架。
其中相同的具有共性的步骤（如烧开水、倒入杯中），直接在抽象类中给出具体实现。
而对于有差异性的步骤，则在各自的具体类中给出实现。


5.模板方法模式中的方法

	public abstract class AbstractTemplate {
	    /**
	     * 模板方法
	     */
	    public void templateMethod(){
	        //调用基本方法
	        abstractMethod();
	        hookMethod();
	        concreteMethod();
	    }
	    /**
	     * 基本方法的声明（由子类实现）
	     */
	    protected abstract void abstractMethod();
	    /**
	     * 基本方法(空方法)
	     */
	    protected void hookMethod(){}
	    /**
	     * 基本方法（已经实现）
	     */
	    private final void concreteMethod(){
	        //业务相关的代码
	    }
	}
	
	public class ConcreteTemplate extends AbstractTemplate{
	    //基本方法的实现
	    @Override
	    public void abstractMethod() {
	        //业务相关的代码
	    }
	    //重写父类的方法
	    @Override
	    public void hookMethod() {
	        //业务相关的代码
	    }
	}

　　模板方法中的方法可以分为两大类：模板方法和基本方法。

　　模板方法：
　　一个模板方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一个总行为的方法。
　　一个抽象类可以有任意多个模板方法，而不限于一个。每一个模板方法都可以调用任意多个具体方法。

　　基本方法：
　　基本方法又可以分为三种：抽象方法(Abstract Method)、具体方法(Concrete Method)和钩子方法(Hook Method)。
　　●　抽象方法：一个抽象方法由抽象类声明，由具体子类实现。在Java语言里抽象方法以abstract关键字标示。
　　●　具体方法：一个具体方法由抽象类声明并实现，而子类并不实现或置换。
　　●　钩子方法：一个钩子方法由抽象类声明并实现，而子类会加以扩展。通常抽象类给出的实现是一个空实现，作为方法的默认实现。
　　在上面的例子中，AbstractTemplate是一个抽象类，它带有三个方法。其中abstractMethod()是一个抽象方法，它由抽象类声明为抽象方法，并由子类实现；hookMethod()是一个钩子方法，它由抽象类声明并提供默认实现，并且由子类置换掉。concreteMethod()是一个具体方法，它由抽象类声明并实现。

　　默认钩子方法
　　一个钩子方法常常由抽象类给出一个空实现作为此方法的默认实现。这种空的钩子方法叫做“Do Nothing Hook”。显然，这种默认钩子方法在缺省适配模式里面已经见过了，一个缺省适配模式讲的是一个类为一个接口提供一个默认的空实现，从而使得缺省适配类的子类不必像实现接口那样必须给出所有方法的实现，因为通常一个具体类并不需要所有的方法。

　　命名规则
　　命名规则是设计师之间赖以沟通的管道之一，使用恰当的命名规则可以帮助不同设计师之间的沟通。
　　钩子方法的名字应当以do开始，这是熟悉设计模式的Java开发人员的标准做法。在上面的例子中，钩子方法hookMethod()应当以do开头；在HttpServlet类中，也遵从这一命名规则，如doGet()、doPost()等方法。